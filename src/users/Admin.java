package users;


import Database.Database;
import enums.Faculty;
import enums.ManagerType;
import enums.TeacherType;
import enums.UserType;
import exeptions.InvalidManagerTypeException;
import factories.UserFactory;
import menu.Menu;
import menu.Runnable;
import utils.Credentials;
import utils.Post;
import utils.Request;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import java.util.stream.Collectors;


public class Admin extends Employee implements CanSendRequests, CanBecomeResearcher, Serializable {
    private Vector<String> userLogs;

    public Admin(){

    }

    public Admin(String name, String lastName) {
        super(name, lastName);
    }


    public Vector<String> getUserLogs() {
        return userLogs;
    }

    public void setUserLogs(Vector<String> userLogs) {
        this.userLogs = userLogs;
    }

    
    public void addUser(String name, String lastName, UserType userType) throws IOException {
        addUser( UserFactory.getUser(name, lastName, userType));
    }

    public void addUser(User user) throws IOException {
        String username = Credentials.generateUserName(user.getName(), user.getLastName());
        String password = Credentials.generateRandomPassword();
        System.out.println("Autogenerated credentials: " + username + ", " + password);

        Credentials newCredentials = new Credentials(username, Credentials.hashPassword(password));
        Database.DATA.getUsers().put(newCredentials, user);

    }
    /**
    * @generated
    */
    public void removeUser(String username) {
        Database.DATA.getUsers().keySet().stream()
                .filter(n -> n.getUsername().equals(username)).
                map(n -> Database.DATA.getUsers().get(n)).filter(n -> n instanceof CanBecomeResearcher).forEach(n -> (n).deleteResearchAccount());

        Database.DATA.getUsers().keySet().removeIf(n -> n.getUsername().equals(username));

    }

    public boolean updateUser() {
        // TODO
        return false;
    }

    public String viewLogs() {

        // TODO
  
        String logFiles = "";
        List<String> logs = Database.DATA.getLogs().stream().collect(Collectors.toList());
        Collections.reverse(logs);
        logs.stream().limit(10).forEach(n -> logFiles.concat(n + "\n"));
        return logs.size()>0?logFiles: "No recent log files";
    }

    

    @Override
    public void becomeResearcher() {
        // TODO
    }

    @Override
    public void deleteResearchAccount() {

    }


    @Override
    public void sendRequest(String request) {
        Database.DATA.getRector().getRequests().add(new Request(request, this));
    }

    public void addUser(String givenName, String surname, UserType role, Faculty faculty) throws IOException{
        addUser(UserFactory.getUser(givenName, surname, role, faculty));
    }
    public void addUser(String firstName, String lastName, Faculty faculty, TeacherType role) throws IOException{
        addUser(UserFactory.getUser(firstName, lastName, faculty, role));
    }
    public void addUser(String firstName, String lastName, ManagerType role) throws InvalidManagerTypeException, IOException {
        addUser(UserFactory.getUser(firstName, lastName, role));
    }

    @Override
    public void run() throws IOException {
        Runnable options[] = Menu.adminMenu;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        while (true){
            System.out.println("Select an action:\n" +
                    "1.Display news\n" +
                    "2.Check notifications\n" +
                    "3.List research papers\n" +
                    "4.Edit journals\n" +
                    "5.Compose massage\n" +
                    "6.Submit request\n" +
                    "7.Add a new user\n" +
                    "8.Delete an existing user\n" +
                    "9.Access log files\n" +
                    "10.Exit the program\n");
            try{

                int selection = Integer.parseInt(br.readLine());
                if (selection == 10){
                    exit();
                    break;
                }
                if (selection < 1 || selection > 10){
                    System.out.println("Invalid option. Try again.");
                    continue;
                }

                options[selection - 1].runMenu(this);
            }catch (NumberFormatException e){
                System.out.println("Invalid input! Please enter a number.");
            }catch (Exception e){
                System.out.println("An error occurred while executing the action. Please try again.");
                e.printStackTrace();
                save();
            }
        }
    }




    @Override
    public int compareTo(User o) {
        return 0;
    }
}







