package users;


import Database.Database;
import enums.UserType;
import factories.UserFactory;
import utils.Credentials;
import utils.Request;

import java.util.Collections;
import java.util.List;
import java.util.Vector;
import java.util.stream.Collectors;


public class Admin extends Employee implements CanSendRequests, CanBecomeResearcher {
    private Vector<String> userLogs;


    

    

    

    

    public Admin(String name, String lastName) {
        super(name, lastName);
    }


    public Vector<String> getUserLogs() {
        return userLogs;
    }

    public void setUserLogs(Vector<String> userLogs) {
        this.userLogs = userLogs;
    }

    
    public void addUser(String name, String lastName, UserType userType) {
        addUser( UserFactory.getUser(name, lastName, userType));
    }
    public void addUser(User u){
        String username = Credentials.generateUserName(u.getName(), u.getLastName());
        String password = Credentials.generateRandomPassword();
        System.out.println("Autogenerated credentials: " + username + ", " + password);

        Credentials newCredentials = new Credentials(username, password);
        Database.DATA.getUsers().put(newCredentials, u);
    }
    /**
    * @generated
    */
    public void removeUser(String username) {
        Database.DATA.getUsers().keySet().stream()
                .filter(n -> n.getUsername().equals(username)).
                map(n -> Database.DATA.getUsers().get(n)).filter(n -> n instanceof CanBecomeResearcher).forEach(n -> (n).deleteResearchAccount());

        Database.DATA.getUsers().keySet().removeIf(n -> n.getUsername().equals(username));

    }

    public boolean updateUser() {
        // TODO
        return false;
    }

    public String viewLogs() {

        // TODO
  
        String logFiles = "";
        List<String> logs = Database.DATA.getLogs().stream().collect(Collectors.toList());
        Collections.reverse(logs);
        logs.stream().limit(10).forEach(n -> logFiles.concat(n + "\n"));
        return logs.size()>0?logFiles: "No recent log files";
    }

    

    @Override
    public void becomeResearcher() {
        // TODO
    }

        
    }


    @Override
    public void sendRequest(String request) {
        Database.DATA.getRector().getRequests().add(new Request(request, this));
    }

    @Override
    public void deleteResearchAccount() {

    }

}
